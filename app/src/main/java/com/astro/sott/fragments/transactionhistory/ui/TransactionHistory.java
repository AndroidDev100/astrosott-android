package com.astro.sott.fragments.transactionhistory.ui;

import android.app.DownloadManager;
import android.content.pm.PackageManager;
import android.os.AsyncTask;
import android.os.Build;
import android.os.Bundle;

import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.core.app.ActivityCompat;
import androidx.core.content.ContextCompat;
import androidx.fragment.app.Fragment;
import androidx.lifecycle.ViewModelProviders;
import androidx.recyclerview.widget.LinearLayoutManager;
import androidx.recyclerview.widget.RecyclerView;

import android.os.Environment;
import android.util.Base64;
import android.util.Log;
import android.view.LayoutInflater;
import android.view.View;
import android.widget.Toast;

import com.astro.sott.R;
import com.astro.sott.baseModel.BaseBindingFragment;
import com.astro.sott.callBacks.commonCallBacks.PlanSelectedCallback;
import com.astro.sott.databinding.FragmentTransactionHistoryBinding;
import com.astro.sott.fragments.subscription.vieModel.SubscriptionViewModel;
import com.astro.sott.fragments.transactionhistory.adapter.TransactionAdapter;
import com.astro.sott.networking.refreshToken.EvergentRefreshToken;
import com.astro.sott.usermanagment.modelClasses.getPaymentV2.OrderItem;
import com.astro.sott.utils.commonMethods.AppCommonMethods;
import com.astro.sott.utils.helpers.ToastHandler;
import com.astro.sott.utils.userInfo.UserInfo;

import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

/**
 * A simple {@link Fragment} subclass.
 * Use the {@link TransactionHistory#newInstance} factory method to
 * create an instance of this fragment.
 */
public class TransactionHistory extends BaseBindingFragment<FragmentTransactionHistoryBinding> implements PlanSelectedCallback {
    private SubscriptionViewModel subscriptionViewModel;
    private List<OrderItem> orderList;
    private List<OrderItem> failedOrderList, pendingList, approvedList;

    private boolean checkboxVisible = false;
    private static final int PERMISSION_REQUEST_CODE = 1;
    private ArrayList<String> downloadIds;

    private String[] urls;

    // TODO: Rename parameter arguments, choose names that match
    // the fragment initialization parameters, e.g. ARG_ITEM_NUMBER
    private static final String ARG_PARAM1 = "param1";
    private static final String ARG_PARAM2 = "param2";

    // TODO: Rename and change types of parameters
    private String mParam1;
    private String mParam2;

    public TransactionHistory() {
        // Required empty public constructor
    }

    /**
     * Use this factory method to create a new instance of
     * this fragment using the provided parameters.
     *
     * @param param1 Parameter 1.
     * @param param2 Parameter 2.
     * @return A new instance of fragment TransactionHistory.
     */
    // TODO: Rename and change types and number of parameters
    public static TransactionHistory newInstance(String param1, String param2) {
        TransactionHistory fragment = new TransactionHistory();
        Bundle args = new Bundle();
        args.putString(ARG_PARAM1, param1);
        args.putString(ARG_PARAM2, param2);
        fragment.setArguments(args);
        return fragment;
    }

    @Override
    public void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        if (getArguments() != null) {
            mParam1 = getArguments().getString(ARG_PARAM1);
            mParam2 = getArguments().getString(ARG_PARAM2);
        }
    }

    @Override
    public void onActivityCreated(@Nullable Bundle savedInstanceState) {
        super.onActivityCreated(savedInstanceState);
        modelCall();
        UIinitialization();
        setClicks();
        getPaymentV2();
        allowPermission();

    }

    private void setClicks() {
        getBinding().arrow.setOnClickListener(v -> {
            if (getBinding().separator.getVisibility() == View.GONE) {
                setArrow(true);
                checkForSelected();
            } else {
                setArrow(false);
            }
        });
        getBinding().secondText.setOnClickListener(v -> {
            setData(getBinding().secondText.getText().toString());
        });
        getBinding().thirdText.setOnClickListener(v -> {
            setData(getBinding().thirdText.getText().toString());

        });
        getBinding().downloadButton.setOnClickListener(v -> {
            if (orderList.size() > 0) {
                if (checkboxVisible) {
                    checkboxVisible = false;
                } else {
                    checkboxVisible = true;
                }

                if (getBinding().selectedText.getText().toString().equalsIgnoreCase(getResources().getString(R.string.successful))) {
                    loadDataFromModel(approvedList, checkboxVisible);
                } else if (getBinding().selectedText.getText().toString().equalsIgnoreCase(getResources().getString(R.string.pending))) {
                    loadDataFromModel(pendingList, checkboxVisible);
                } else if (getBinding().selectedText.getText().toString().equalsIgnoreCase(getResources().getString(R.string.failed))) {
                    loadDataFromModel(failedOrderList, checkboxVisible);
                }

            }
        });

        getBinding().downloadAll.setOnClickListener(v -> {
            urls = new String[downloadIds.size()];

            if (downloadIds.size() > 0)
                getInvoices(downloadIds.get(0), 0);
         /*   String[] ur = {
                    ""};

            new DownloadFileFromURL().execute(ur);*/

        });
    }

    private void checkForSelected() {
        String selectedText = getBinding().selectedText.getText().toString();
        if (selectedText.equalsIgnoreCase(getResources().getString(R.string.successful))) {
            getBinding().secondText.setText(getResources().getString(R.string.pending));
            getBinding().thirdText.setText(getResources().getString(R.string.failed));

        } else if (selectedText.equalsIgnoreCase(getResources().getString(R.string.pending))) {
            getBinding().secondText.setText(getResources().getString(R.string.successful));
            getBinding().thirdText.setText(getResources().getString(R.string.failed));
        } else if (selectedText.equalsIgnoreCase(getResources().getString(R.string.failed))) {
            getBinding().secondText.setText(getResources().getString(R.string.successful));
            getBinding().thirdText.setText(getResources().getString(R.string.pending));
        }

    }

    private void setData(String dataType) {
        if (dataType.equalsIgnoreCase(getResources().getString(R.string.successful))) {
            loadDataFromModel(approvedList, false);
            getBinding().selectedText.setText(getResources().getString(R.string.successful));
        } else if (dataType.equalsIgnoreCase(getResources().getString(R.string.pending))) {
            loadDataFromModel(pendingList, false);
            getBinding().selectedText.setText(getResources().getString(R.string.pending));
        } else if (dataType.equalsIgnoreCase(getResources().getString(R.string.failed))) {
            loadDataFromModel(failedOrderList, false);
            getBinding().selectedText.setText(getResources().getString(R.string.failed));
        }
        setArrow(false);

    }

    private void setArrow(boolean b) {
        if (b) {
            getBinding().arrow.setBackground(getResources().getDrawable(R.drawable.ic_baseline_keyboard_arrow_up_24));
            getBinding().separator.setVisibility(View.VISIBLE);
            getBinding().secondText.setVisibility(View.VISIBLE);
            getBinding().thirdText.setVisibility(View.VISIBLE);
        } else {
            getBinding().arrow.setBackground(getResources().getDrawable(R.drawable.ic_baseline_keyboard_arrow_down_24));
            getBinding().separator.setVisibility(View.GONE);
            getBinding().secondText.setVisibility(View.GONE);
            getBinding().thirdText.setVisibility(View.GONE);
        }
    }

    private int transactionIdCount = 0;


    private void getInvoices(String transactionId, int count) {
        getBinding().includeProgressbar.progressBar.setVisibility(View.VISIBLE);
        if (transactionIdCount < downloadIds.size()) {
            subscriptionViewModel.getInvoice(UserInfo.getInstance(getActivity()).getAccessToken(), transactionId).observe(this, invoiceResponse -> {
                if (invoiceResponse.isStatus()) {
                    if (invoiceResponse.getResponse().getGetInvoicePDFResponseMessage() != null && invoiceResponse.getResponse().getGetInvoicePDFResponseMessage().getResponseData() != null) {
                        urls[count] = invoiceResponse.getResponse().getGetInvoicePDFResponseMessage().getResponseData();
                        transactionIdCount++;
                        getInvoices(downloadIds.get(count), transactionIdCount);
                    } else {
                        getBinding().includeProgressbar.progressBar.setVisibility(View.GONE);

                    }
                } else {
                    Toast.makeText(getActivity(), invoiceResponse.getErrorMessage(), Toast.LENGTH_SHORT).show();
                    getBinding().includeProgressbar.progressBar.setVisibility(View.GONE);

                }
            });
        } else {
            if (urls.length > 0) {
                new DownloadFileFromURL().execute(urls);
            } else {
                getBinding().includeProgressbar.progressBar.setVisibility(View.GONE);

            }
        }
    }

    private void getPaymentV2() {
        orderList = new ArrayList<>();
        downloadIds = new ArrayList<>();
        getBinding().includeProgressbar.progressBar.setVisibility(View.VISIBLE);
        subscriptionViewModel.getPaymentV2(UserInfo.getInstance(getActivity()).getAccessToken()).observe(this, evergentCommonResponse -> {
            getBinding().includeProgressbar.progressBar.setVisibility(View.GONE);
            if (evergentCommonResponse.isStatus()) {
                if (evergentCommonResponse.getPaymentV2Response() != null && evergentCommonResponse.getPaymentV2Response().getGetPaymentsV2ResponseMessage() != null && evergentCommonResponse.getPaymentV2Response().getGetPaymentsV2ResponseMessage().getOrder() != null && evergentCommonResponse.getPaymentV2Response().getGetPaymentsV2ResponseMessage().getOrder().size() > 0) {
                    getBinding().statusLay.setVisibility(View.VISIBLE);
                    orderList.addAll(evergentCommonResponse.getPaymentV2Response().getGetPaymentsV2ResponseMessage().getOrder());
                    checkTypesOfOrder(orderList);
                } else {
                    getBinding().statusLay.setVisibility(View.GONE);
                }
            } else {

                if (evergentCommonResponse.getErrorCode().equalsIgnoreCase("eV2124") || evergentCommonResponse.getErrorCode().equals("111111111")) {
                    EvergentRefreshToken.refreshToken(getActivity(), UserInfo.getInstance(getActivity()).getRefreshToken()).observe(this, evergentCommonResponse1 -> {
                        if (evergentCommonResponse.isStatus()) {
                            getPaymentV2();
                        } else {
                            AppCommonMethods.removeUserPrerences(getActivity());
                        }
                    });
                } else {
                    getBinding().statusLay.setVisibility(View.GONE);
                    Toast.makeText(getActivity(), evergentCommonResponse.getErrorMessage(), Toast.LENGTH_SHORT).show();
                }

            }
        });
    }

    private void checkTypesOfOrder(List<OrderItem> orderList) {
        failedOrderList = new ArrayList<>();
        pendingList = new ArrayList<>();
        approvedList = new ArrayList<>();

        for (OrderItem orderItem : orderList) {
            if (orderItem.getPaymentsInfo() != null && orderItem.getPaymentsInfo().size() > 0 && orderItem.getPaymentsInfo().get(0) != null && orderItem.getPaymentsInfo().get(0).getPostingStatus() != null) {
                if (orderItem.getPaymentsInfo().get(0).getPostingStatus().equalsIgnoreCase("declined")) {
                    failedOrderList.add(orderItem);
                } else if (orderItem.getPaymentsInfo().get(0).getPostingStatus().equalsIgnoreCase("Posted")) {
                    approvedList.add(orderItem);
                } else if (orderItem.getPaymentsInfo().get(0).getPostingStatus().equalsIgnoreCase("pending")) {
                    pendingList.add(orderItem);
                }
            }
        }

        loadDataFromModel(approvedList, false);

    }

    private void modelCall() {
        subscriptionViewModel = ViewModelProviders.of(this).get(SubscriptionViewModel.class);
    }

    private void loadDataFromModel(List<OrderItem> order, boolean checkboxVisibility) {
        if (order.size() > 0) {
            TransactionAdapter adapter = new TransactionAdapter(TransactionHistory.this, order, checkboxVisibility);
            getBinding().recyclerView.setAdapter(adapter);
        } else {
            getBinding().recyclerView.setAdapter(null);
        }

    }

    private void UIinitialization() {
        getBinding().recyclerView.hasFixedSize();
        getBinding().recyclerView.setNestedScrollingEnabled(false);
        getBinding().recyclerView.hasFixedSize();
        getBinding().recyclerView.setLayoutManager(new LinearLayoutManager(getActivity(), RecyclerView.VERTICAL, false));

        getBinding().selectedText.setText(getResources().getString(R.string.successful));
        getBinding().secondText.setText(getResources().getString(R.string.pending));
        getBinding().thirdText.setText(getResources().getString(R.string.failed));
        getBinding().backButton.setOnClickListener(v -> {

        });
    }

    private void allowPermission() {
        if (Build.VERSION.SDK_INT >= 23) {
            if (checkPermission()) {

            } else {
                requestPermission(); // Code for permission
            }
        } else {
            // Code for Below 23 API Oriented Device
            // Do next code
        }
    }

    private void requestPermission() {
        ActivityCompat.requestPermissions(getActivity(), new String[]{android.Manifest.permission.WRITE_EXTERNAL_STORAGE}, PERMISSION_REQUEST_CODE);
    }

    private boolean checkPermission() {
        int result = ContextCompat.checkSelfPermission(getActivity(), android.Manifest.permission.WRITE_EXTERNAL_STORAGE);
        return result == PackageManager.PERMISSION_GRANTED;
    }

    @Override
    protected FragmentTransactionHistoryBinding inflateBindingLayout(@NonNull LayoutInflater inflater) {
        return FragmentTransactionHistoryBinding.inflate(inflater);
    }


    @Override
    public void onPlanSelected(String planId) {
        if (downloadIds.size() > 0) {
            if (!downloadIds.contains(planId)) {
                downloadIds.add(planId);
            }
        } else {
            downloadIds.add(planId);
        }
        setDownloadUI();


    }

    private void setDownloadUI() {
        if (downloadIds.size() == 0) {
            getBinding().downloadLay.setVisibility(View.GONE);

        } else {
            getBinding().selectedSize.setText("SELECT items (" + downloadIds.size() + ")");
            getBinding().downloadLay.setVisibility(View.VISIBLE);
        }
    }

    @Override
    public void onPlanUnselected(String planId) {
        if (downloadIds.size() > 0) {
            for (String download : downloadIds) {
                if (download.equalsIgnoreCase(planId)) {
                    downloadIds.remove(downloadIds.indexOf(planId));
                    setDownloadUI();
                    break;
                }
            }
        }

    }

    class DownloadFileFromURL extends AsyncTask<String, Integer, String> {

        /**
         * Before starting background thread Show Progress Bar Dialog
         */
        @Override
        protected void onPreExecute() {

        }

        /**
         * Downloading file in background thread
         */
        @Override
        protected String doInBackground(String... f_url) {
            for (int i = 0; i < f_url.length; i++) {
                getFileFromBase64AndSaveInSDCard(f_url[i], "astro_transaction" + i, "pdf");

            }

            return null;
        }

        /**
         * Updating progress bar
         */
        protected void onProgressUpdate(Integer... progress) {
            // setting progress percentage
        }

        /**
         * After completing background task Dismiss the progress dialog
         **/
        @Override
        protected void onPostExecute(String file_url) {
            if (getActivity() != null) {
                getActivity().runOnUiThread(() -> {
                });
            }
            // dismiss the dialog after the file was downloaded

            // Displaying downloaded image into image view
            // Reading image path from sdcard
            // setting downloaded into image view
            // my_image.setImageDrawable(Drawable.createFromPath(imagePath));
        }

        public GetFilePathAndStatus getFileFromBase64AndSaveInSDCard(String base64, String filename, String extension) {
            GetFilePathAndStatus getFilePathAndStatus = new GetFilePathAndStatus();
            try {
                byte[] pdfAsBytes = Base64.decode(base64, 0);
                FileOutputStream os;
                os = new FileOutputStream(getReportPath(filename, extension), false);
                os.write(pdfAsBytes);
                os.flush();
                os.close();
                getFilePathAndStatus.filStatus = true;
                getFilePathAndStatus.filePath = getReportPath(filename, extension);
                getActivity().runOnUiThread(() -> {
                    getBinding().includeProgressbar.progressBar.setVisibility(View.GONE);
                    Toast.makeText(getContext(), "Invoice Downloaded", Toast.LENGTH_SHORT).show();
                    getBinding().downloadLay.setVisibility(View.GONE);
                });
                return getFilePathAndStatus;
            } catch (IOException e) {
                getBinding().includeProgressbar.progressBar.setVisibility(View.GONE);
                e.printStackTrace();
                getFilePathAndStatus.filStatus = false;
                getFilePathAndStatus.filePath = getReportPath(filename, extension);
                return getFilePathAndStatus;
            }
        }

        public String getReportPath(String filename, String extension) {
            File file = new File(Environment.getExternalStorageDirectory().getPath(), "sooka");
            if (!file.exists()) {
                file.mkdirs();
            }
            String uriSting = (file.getAbsolutePath() + "/" + filename + "." + extension);
            return uriSting;

        }

        public class GetFilePathAndStatus {
            boolean filStatus;
            String filePath;

        }
    }
}